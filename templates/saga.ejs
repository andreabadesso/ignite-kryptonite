import { call, put, select } from 'redux-saga/effects'
import <%= props.name %>Actions from '../Redux/<%= props.name %>Redux'
import { getAttributes, mapAttributes } from '../Transforms/TransformAttributes'

// export const someData = state => state.some.data

export function * get<%= pascalCase(props.name) %> (api, action) {
  const { data } = action
  // make the call to the api
  const response = yield call(api.get<%= pascalCase(props.name) %>, data)

  // success?
  if (response.ok) {
    // You might need to change the response here - do this with a 'transform',
    // located in ../Transforms/. Otherwise, just pass the data back from the api.
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Success(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure())
  }
}

export function * post<%= pascalCase(props.name) %> (api, action) {
  const { data } = action
  // make the call to the api
  const response = yield call(api.post<%= props.name %>, data)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>SingleSuccess(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure())
  }
}

export function * update<%= pascalCase(props.name) %> (api, action) {
  const { data } = action
  // make the call to the api
  const response = yield call(api.patch<%= props.name %>, data)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Success(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure())
  }
}

export function * remove<%= pascalCase(props.name) %> (api, action) {
  const { data } = action
  // make the call to the api
  const response = yield call(api.remove<%= props.name %>, data)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Success(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name)   %>Failure())
  }
}

export function * get<%= pascalCase(props.name) %>s (api, action) {
  const { data } = action
  // make the call to the api
  const response = yield call(api.get<%= props.name %>s, data)

  // success?
  if (response.ok) {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>AllSuccess(mapAttributes(response.data)))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name)   %>Failure())
  }
}
